{"version":3,"sources":["components/todoInput.component.jsx","components/todoItem.component.jsx","components/todoList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","React","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a86b00c7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass TodoInput extends React.Component {\r\n    render() {\r\n        const { item, handleChange, handleSubmit, editItem } = this.props;\r\n\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i className=\"fas fa-book\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\"\r\n                            className=\"form-control text-capitalize\"\r\n                            placeholder=\"add a todo item\"\r\n                            value={item}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                    </div>\r\n                    <button type=\"submit\"\r\n                        className={\r\n                            editItem ? \"btn btn-block btn-success mt-3\" :\r\n                                \"btn btn-block btn-primary mt-3\"\r\n                        }\r\n                    >\r\n                        {editItem ? 'Edit Item' : \"Add Item\"} </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n    render() {\r\n        const {title, handleDelete, handleEdit} = this.props;\r\n\r\n        return (\r\n            <li className=\"list-group-item text-capitalize d-flex \r\n                justify-content-between my-2\"> \r\n                <h6>{title}</h6>\r\n                <div className=\"todo-icon\">\r\n                    <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n                      <i className=\"fas fa-pen\" />\r\n                      </span>\r\n                    <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n                      <i className=\"fas fa-trash\"/>\r\n                     </span>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n} \r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './todoItem.component';\r\n\r\nclass TodoList extends React.Component {\r\n    render() {\r\n        const { items,clearList,handleDelete,handleEdit } = this.props\r\n\r\n        return (\r\n            <ul className=\"list-group my-5\">\r\n                <h3 className=\"text-capitalize text-center\">List ToDo\r\n                </h3>\r\n\r\n                {\r\n                    items.map(item => {\r\n                        return (\r\n                            <TodoItem \r\n                            key={item.id} \r\n                            title={item.title}\r\n                            handleDelete={() => handleDelete(item.id)} \r\n                            handleEdit={() => handleEdit(item.id)}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-danger btn-block text-capitalize \r\n                    mt-5\" onClick={clearList}>\r\n                    Clear list</button>\r\n            </ul>\r\n        )\r\n    }\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoInput from './components/todoInput.component';\nimport TodoList from './components/todoList.component';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\n\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  };\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n    const updatedItems = [...this.state.items, newItem];\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n    })\n\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  handleEdit = (id) => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n\n    const selectedItem = this.state.items.find(item => item.id === id)\n    console.log(selectedItem);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"conatiner\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">\n              ADD Todo List\n            </h3>\n            <TodoInput item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList items={this.state.items} clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}